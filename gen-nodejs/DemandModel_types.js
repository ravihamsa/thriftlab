//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.ClickToAction = {
'URL' : 1,
'SMS' : 2,
'CALL' : 3
};
ttypes.Gender = {
'MALE' : 1,
'FEMALE' : 2
};
ttypes.DayOfWeek = {
'MON' : 0,
'TUE' : 1,
'WED' : 2,
'THU' : 3,
'FRI' : 4,
'SAT' : 5,
'SUN' : 6
};
ttypes.DomainTraffic = {
'APP' : 1,
'BROWSER' : 2
};
ttypes.SelectionMode = {
'INCLUDE' : 1,
'EXCLUDE' : 2
};
ttypes.DemandStatus = {
'DRAFT' : 1,
'ACTIVE' : 3,
'PAUSED' : 4,
'EXPIRED' : 5,
'PENDING' : 6,
'REJECTED' : 7,
'ARCHIVED' : 9
};
ttypes.DemandSource = {
'NETWORK' : 1,
'TPAN' : 2,
'IFD' : 3,
'IN_HOUSE' : 4,
'HOSTED' : 5
};
ttypes.BudgetType = {
'ACCOUNT' : 1,
'CAMPAIGN' : 2
};
ttypes.PriceType = {
'CPC' : 1,
'CPM' : 2
};
ttypes.AdRatingType = {
'PERFORMANCE' : 0,
'MATURE' : 1,
'FAMILY_SAFE' : 2
};
ttypes.TrackingCodeType = {
'URL' : 1,
'SCRIPT' : 2
};
ttypes.BusinessClassification = {
'AFFILIATES' : 1,
'CONTENT' : 2,
'APPS' : 3,
'BRAND_PERFORMANCE' : 4,
'BRAND' : 5
};
ttypes.TargetingType = {
'INMOBI_PRESET' : 1,
'ACCOUNT_PRESET' : 2,
'CUSTOM' : 3
};
ttypes.DeviceSelectionMode = {
'ALL' : 1,
'GROUP' : 2,
'SPECIFIC' : 3
};
ttypes.AdFormat = {
'TEXT' : 0,
'BANNER' : 1,
'BANNER_URL' : 3,
'THREED' : 4,
'EXPANDABLE' : 5,
'INTERSTITIAL' : 6,
'TWO_PIECE' : 7,
'RICH_BANNER' : 8
};
ttypes.CreativeContentProvider = {
'SPROUT' : 0,
'OTHERS' : 1
};
ttypes.RMContentType = {
'URL' : 1,
'HTML' : 2,
'JS' : 3
};
AgeRange = module.exports.AgeRange = function(args) {
  this.ageStart = null;
  this.ageEnd = null;
  if (args) {
    if (args.ageStart !== undefined) {
      this.ageStart = args.ageStart;
    }
    if (args.ageEnd !== undefined) {
      this.ageEnd = args.ageEnd;
    }
  }
};
AgeRange.prototype = {};
AgeRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ageStart = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ageEnd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeRange.prototype.write = function(output) {
  output.writeStructBegin('AgeRange');
  if (this.ageStart !== null && this.ageStart !== undefined) {
    output.writeFieldBegin('ageStart', Thrift.Type.I32, 1);
    output.writeI32(this.ageStart);
    output.writeFieldEnd();
  }
  if (this.ageEnd !== null && this.ageEnd !== undefined) {
    output.writeFieldBegin('ageEnd', Thrift.Type.I32, 2);
    output.writeI32(this.ageEnd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DateTime = module.exports.DateTime = function(args) {
  this.date = null;
  this.time = null;
  this.timeZoneCode = null;
  if (args) {
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.timeZoneCode !== undefined) {
      this.timeZoneCode = args.timeZoneCode;
    }
  }
};
DateTime.prototype = {};
DateTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timeZoneCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DateTime.prototype.write = function(output) {
  output.writeStructBegin('DateTime');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 1);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 2);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.timeZoneCode !== null && this.timeZoneCode !== undefined) {
    output.writeFieldBegin('timeZoneCode', Thrift.Type.STRING, 3);
    output.writeString(this.timeZoneCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WriteContext = module.exports.WriteContext = function(args) {
  this.appSourceId = null;
  this.modifiedBy = null;
  this.correlationId = null;
  if (args) {
    if (args.appSourceId !== undefined) {
      this.appSourceId = args.appSourceId;
    }
    if (args.modifiedBy !== undefined) {
      this.modifiedBy = args.modifiedBy;
    }
    if (args.correlationId !== undefined) {
      this.correlationId = args.correlationId;
    }
  }
};
WriteContext.prototype = {};
WriteContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appSourceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.modifiedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.correlationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WriteContext.prototype.write = function(output) {
  output.writeStructBegin('WriteContext');
  if (this.appSourceId !== null && this.appSourceId !== undefined) {
    output.writeFieldBegin('appSourceId', Thrift.Type.I32, 1);
    output.writeI32(this.appSourceId);
    output.writeFieldEnd();
  }
  if (this.modifiedBy !== null && this.modifiedBy !== undefined) {
    output.writeFieldBegin('modifiedBy', Thrift.Type.STRING, 2);
    output.writeString(this.modifiedBy);
    output.writeFieldEnd();
  }
  if (this.correlationId !== null && this.correlationId !== undefined) {
    output.writeFieldBegin('correlationId', Thrift.Type.STRING, 3);
    output.writeString(this.correlationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CampaignBudgetConstraint = module.exports.CampaignBudgetConstraint = function(args) {
  this.dailyLimit = null;
  this.dynamicDailyLimit = null;
  this.dailyLeewayPercentage = null;
  this.dailyLimitInherited = null;
  if (args) {
    if (args.dailyLimit !== undefined) {
      this.dailyLimit = args.dailyLimit;
    }
    if (args.dynamicDailyLimit !== undefined) {
      this.dynamicDailyLimit = args.dynamicDailyLimit;
    }
    if (args.dailyLeewayPercentage !== undefined) {
      this.dailyLeewayPercentage = args.dailyLeewayPercentage;
    }
    if (args.dailyLimitInherited !== undefined) {
      this.dailyLimitInherited = args.dailyLimitInherited;
    }
  }
};
CampaignBudgetConstraint.prototype = {};
CampaignBudgetConstraint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dailyLimit = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.dynamicDailyLimit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dailyLeewayPercentage = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.dailyLimitInherited = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CampaignBudgetConstraint.prototype.write = function(output) {
  output.writeStructBegin('CampaignBudgetConstraint');
  if (this.dailyLimit !== null && this.dailyLimit !== undefined) {
    output.writeFieldBegin('dailyLimit', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.dailyLimit);
    output.writeFieldEnd();
  }
  if (this.dynamicDailyLimit !== null && this.dynamicDailyLimit !== undefined) {
    output.writeFieldBegin('dynamicDailyLimit', Thrift.Type.BOOL, 2);
    output.writeBool(this.dynamicDailyLimit);
    output.writeFieldEnd();
  }
  if (this.dailyLeewayPercentage !== null && this.dailyLeewayPercentage !== undefined) {
    output.writeFieldBegin('dailyLeewayPercentage', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.dailyLeewayPercentage);
    output.writeFieldEnd();
  }
  if (this.dailyLimitInherited !== null && this.dailyLimitInherited !== undefined) {
    output.writeFieldBegin('dailyLimitInherited', Thrift.Type.BOOL, 4);
    output.writeBool(this.dailyLimitInherited);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Campaign = module.exports.Campaign = function(args) {
  this.demandSource = null;
  this.accountId = null;
  this.name = null;
  this.startTime = null;
  this.endTime = null;
  this.budgetType = null;
  this.totalBugdet = null;
  this.currencyId = null;
  this.budgetConstraint = null;
  if (args) {
    if (args.demandSource !== undefined) {
      this.demandSource = args.demandSource;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.budgetType !== undefined) {
      this.budgetType = args.budgetType;
    }
    if (args.totalBugdet !== undefined) {
      this.totalBugdet = args.totalBugdet;
    }
    if (args.currencyId !== undefined) {
      this.currencyId = args.currencyId;
    }
    if (args.budgetConstraint !== undefined) {
      this.budgetConstraint = args.budgetConstraint;
    }
  }
};
Campaign.prototype = {};
Campaign.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.demandSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTime = new ttypes.DateTime();
        this.startTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.endTime = new ttypes.DateTime();
        this.endTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.budgetType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.totalBugdet = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.currencyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.budgetConstraint = new ttypes.CampaignBudgetConstraint();
        this.budgetConstraint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Campaign.prototype.write = function(output) {
  output.writeStructBegin('Campaign');
  if (this.demandSource !== null && this.demandSource !== undefined) {
    output.writeFieldBegin('demandSource', Thrift.Type.I32, 1);
    output.writeI32(this.demandSource);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRUCT, 4);
    this.startTime.write(output);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRUCT, 5);
    this.endTime.write(output);
    output.writeFieldEnd();
  }
  if (this.budgetType !== null && this.budgetType !== undefined) {
    output.writeFieldBegin('budgetType', Thrift.Type.I32, 6);
    output.writeI32(this.budgetType);
    output.writeFieldEnd();
  }
  if (this.totalBugdet !== null && this.totalBugdet !== undefined) {
    output.writeFieldBegin('totalBugdet', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.totalBugdet);
    output.writeFieldEnd();
  }
  if (this.currencyId !== null && this.currencyId !== undefined) {
    output.writeFieldBegin('currencyId', Thrift.Type.I32, 8);
    output.writeI32(this.currencyId);
    output.writeFieldEnd();
  }
  if (this.budgetConstraint !== null && this.budgetConstraint !== undefined) {
    output.writeFieldBegin('budgetConstraint', Thrift.Type.STRUCT, 9);
    this.budgetConstraint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Preset = module.exports.Preset = function(args) {
  this.id = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Preset.prototype = {};
Preset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Preset.prototype.write = function(output) {
  output.writeStructBegin('Preset');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LatLongDetail = module.exports.LatLongDetail = function(args) {
  this.name = null;
  this.latitude = null;
  this.longitude = null;
  this.radius = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.radius !== undefined) {
      this.radius = args.radius;
    }
  }
};
LatLongDetail.prototype = {};
LatLongDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radius = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LatLongDetail.prototype.write = function(output) {
  output.writeStructBegin('LatLongDetail');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.radius !== null && this.radius !== undefined) {
    output.writeFieldBegin('radius', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.radius);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CarrierTargetingDetail = module.exports.CarrierTargetingDetail = function(args) {
  this.countryId = null;
  this.ccIds = null;
  if (args) {
    if (args.countryId !== undefined) {
      this.countryId = args.countryId;
    }
    if (args.ccIds !== undefined) {
      this.ccIds = args.ccIds;
    }
  }
};
CarrierTargetingDetail.prototype = {};
CarrierTargetingDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.countryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ccIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64();
          this.ccIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CarrierTargetingDetail.prototype.write = function(output) {
  output.writeStructBegin('CarrierTargetingDetail');
  if (this.countryId !== null && this.countryId !== undefined) {
    output.writeFieldBegin('countryId', Thrift.Type.I32, 1);
    output.writeI32(this.countryId);
    output.writeFieldEnd();
  }
  if (this.ccIds !== null && this.ccIds !== undefined) {
    output.writeFieldBegin('ccIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.ccIds.length);
    for (var iter7 in this.ccIds)
    {
      if (this.ccIds.hasOwnProperty(iter7))
      {
        iter7 = this.ccIds[iter7];
        output.writeI64(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GeoTargetingDetail = module.exports.GeoTargetingDetail = function(args) {
  this.countryId = null;
  this.stateIds = null;
  this.cityIds = null;
  this.zipIds = null;
  this.latLongDetails = null;
  if (args) {
    if (args.countryId !== undefined) {
      this.countryId = args.countryId;
    }
    if (args.stateIds !== undefined) {
      this.stateIds = args.stateIds;
    }
    if (args.cityIds !== undefined) {
      this.cityIds = args.cityIds;
    }
    if (args.zipIds !== undefined) {
      this.zipIds = args.zipIds;
    }
    if (args.latLongDetails !== undefined) {
      this.latLongDetails = args.latLongDetails;
    }
  }
};
GeoTargetingDetail.prototype = {};
GeoTargetingDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.countryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.stateIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32();
          this.stateIds.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.cityIds = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readI32();
          this.cityIds.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.zipIds = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = input.readI32();
          this.zipIds.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size29 = 0;
        var _rtmp333;
        this.latLongDetails = [];
        var _etype32 = 0;
        _rtmp333 = input.readListBegin();
        _etype32 = _rtmp333.etype;
        _size29 = _rtmp333.size;
        for (var _i34 = 0; _i34 < _size29; ++_i34)
        {
          var elem35 = null;
          elem35 = new ttypes.LatLongDetail();
          elem35.read(input);
          this.latLongDetails.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GeoTargetingDetail.prototype.write = function(output) {
  output.writeStructBegin('GeoTargetingDetail');
  if (this.countryId !== null && this.countryId !== undefined) {
    output.writeFieldBegin('countryId', Thrift.Type.I32, 1);
    output.writeI32(this.countryId);
    output.writeFieldEnd();
  }
  if (this.stateIds !== null && this.stateIds !== undefined) {
    output.writeFieldBegin('stateIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.stateIds.length);
    for (var iter36 in this.stateIds)
    {
      if (this.stateIds.hasOwnProperty(iter36))
      {
        iter36 = this.stateIds[iter36];
        output.writeI32(iter36);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cityIds !== null && this.cityIds !== undefined) {
    output.writeFieldBegin('cityIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.cityIds.length);
    for (var iter37 in this.cityIds)
    {
      if (this.cityIds.hasOwnProperty(iter37))
      {
        iter37 = this.cityIds[iter37];
        output.writeI32(iter37);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.zipIds !== null && this.zipIds !== undefined) {
    output.writeFieldBegin('zipIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.zipIds.length);
    for (var iter38 in this.zipIds)
    {
      if (this.zipIds.hasOwnProperty(iter38))
      {
        iter38 = this.zipIds[iter38];
        output.writeI32(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.latLongDetails !== null && this.latLongDetails !== undefined) {
    output.writeFieldBegin('latLongDetails', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.latLongDetails.length);
    for (var iter39 in this.latLongDetails)
    {
      if (this.latLongDetails.hasOwnProperty(iter39))
      {
        iter39 = this.latLongDetails[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OSDetail = module.exports.OSDetail = function(args) {
  this.osId = null;
  this.maximumMajorVersion = null;
  this.minimumMajorVersion = null;
  this.selectionMode = null;
  if (args) {
    if (args.osId !== undefined) {
      this.osId = args.osId;
    }
    if (args.maximumMajorVersion !== undefined) {
      this.maximumMajorVersion = args.maximumMajorVersion;
    }
    if (args.minimumMajorVersion !== undefined) {
      this.minimumMajorVersion = args.minimumMajorVersion;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
OSDetail.prototype = {};
OSDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.osId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maximumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.minimumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OSDetail.prototype.write = function(output) {
  output.writeStructBegin('OSDetail');
  if (this.osId !== null && this.osId !== undefined) {
    output.writeFieldBegin('osId', Thrift.Type.I32, 1);
    output.writeI32(this.osId);
    output.writeFieldEnd();
  }
  if (this.maximumMajorVersion !== null && this.maximumMajorVersion !== undefined) {
    output.writeFieldBegin('maximumMajorVersion', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.maximumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.minimumMajorVersion !== null && this.minimumMajorVersion !== undefined) {
    output.writeFieldBegin('minimumMajorVersion', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.minimumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 4);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ManufacturerDetail = module.exports.ManufacturerDetail = function(args) {
  this.manufacturerId = null;
  this.handsetIds = null;
  this.selectionMode = null;
  if (args) {
    if (args.manufacturerId !== undefined) {
      this.manufacturerId = args.manufacturerId;
    }
    if (args.handsetIds !== undefined) {
      this.handsetIds = args.handsetIds;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
ManufacturerDetail.prototype = {};
ManufacturerDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.manufacturerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.handsetIds = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32();
          this.handsetIds.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManufacturerDetail.prototype.write = function(output) {
  output.writeStructBegin('ManufacturerDetail');
  if (this.manufacturerId !== null && this.manufacturerId !== undefined) {
    output.writeFieldBegin('manufacturerId', Thrift.Type.I32, 1);
    output.writeI32(this.manufacturerId);
    output.writeFieldEnd();
  }
  if (this.handsetIds !== null && this.handsetIds !== undefined) {
    output.writeFieldBegin('handsetIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.handsetIds.length);
    for (var iter47 in this.handsetIds)
    {
      if (this.handsetIds.hasOwnProperty(iter47))
      {
        iter47 = this.handsetIds[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 3);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DeviceDetail = module.exports.DeviceDetail = function(args) {
  this.osDetails = null;
  this.manufacturerDetails = null;
  this.deviceTypes = null;
  this.deviceSelectionMode = 1;
  if (args) {
    if (args.osDetails !== undefined) {
      this.osDetails = args.osDetails;
    }
    if (args.manufacturerDetails !== undefined) {
      this.manufacturerDetails = args.manufacturerDetails;
    }
    if (args.deviceTypes !== undefined) {
      this.deviceTypes = args.deviceTypes;
    }
    if (args.deviceSelectionMode !== undefined) {
      this.deviceSelectionMode = args.deviceSelectionMode;
    }
  }
};
DeviceDetail.prototype = {};
DeviceDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.osDetails = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.OSDetail();
          elem54.read(input);
          this.osDetails.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.manufacturerDetails = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = new ttypes.ManufacturerDetail();
          elem61.read(input);
          this.manufacturerDetails.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.deviceTypes = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readI32();
          this.deviceTypes.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deviceSelectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceDetail.prototype.write = function(output) {
  output.writeStructBegin('DeviceDetail');
  if (this.osDetails !== null && this.osDetails !== undefined) {
    output.writeFieldBegin('osDetails', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.osDetails.length);
    for (var iter69 in this.osDetails)
    {
      if (this.osDetails.hasOwnProperty(iter69))
      {
        iter69 = this.osDetails[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.manufacturerDetails !== null && this.manufacturerDetails !== undefined) {
    output.writeFieldBegin('manufacturerDetails', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.manufacturerDetails.length);
    for (var iter70 in this.manufacturerDetails)
    {
      if (this.manufacturerDetails.hasOwnProperty(iter70))
      {
        iter70 = this.manufacturerDetails[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deviceTypes !== null && this.deviceTypes !== undefined) {
    output.writeFieldBegin('deviceTypes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.deviceTypes.length);
    for (var iter71 in this.deviceTypes)
    {
      if (this.deviceTypes.hasOwnProperty(iter71))
      {
        iter71 = this.deviceTypes[iter71];
        output.writeI32(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deviceSelectionMode !== null && this.deviceSelectionMode !== undefined) {
    output.writeFieldBegin('deviceSelectionMode', Thrift.Type.I32, 4);
    output.writeI32(this.deviceSelectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Browser = module.exports.Browser = function(args) {
  this.browserId = null;
  this.maximumMajorVersion = null;
  this.minimumMajorVersion = null;
  this.selectionMode = null;
  if (args) {
    if (args.browserId !== undefined) {
      this.browserId = args.browserId;
    }
    if (args.maximumMajorVersion !== undefined) {
      this.maximumMajorVersion = args.maximumMajorVersion;
    }
    if (args.minimumMajorVersion !== undefined) {
      this.minimumMajorVersion = args.minimumMajorVersion;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
Browser.prototype = {};
Browser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.browserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maximumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.minimumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Browser.prototype.write = function(output) {
  output.writeStructBegin('Browser');
  if (this.browserId !== null && this.browserId !== undefined) {
    output.writeFieldBegin('browserId', Thrift.Type.I32, 1);
    output.writeI32(this.browserId);
    output.writeFieldEnd();
  }
  if (this.maximumMajorVersion !== null && this.maximumMajorVersion !== undefined) {
    output.writeFieldBegin('maximumMajorVersion', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.maximumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.minimumMajorVersion !== null && this.minimumMajorVersion !== undefined) {
    output.writeFieldBegin('minimumMajorVersion', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.minimumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 4);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeWindow = module.exports.TimeWindow = function(args) {
  this.startHour = null;
  this.endHour = null;
  if (args) {
    if (args.startHour !== undefined) {
      this.startHour = args.startHour;
    }
    if (args.endHour !== undefined) {
      this.endHour = args.endHour;
    }
  }
};
TimeWindow.prototype = {};
TimeWindow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.startHour = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.endHour = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeWindow.prototype.write = function(output) {
  output.writeStructBegin('TimeWindow');
  if (this.startHour !== null && this.startHour !== undefined) {
    output.writeFieldBegin('startHour', Thrift.Type.BYTE, 1);
    output.writeByte(this.startHour);
    output.writeFieldEnd();
  }
  if (this.endHour !== null && this.endHour !== undefined) {
    output.writeFieldBegin('endHour', Thrift.Type.BYTE, 2);
    output.writeByte(this.endHour);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Schedule = module.exports.Schedule = function(args) {
  this.dayOfWeek = null;
  this.timeSlots = null;
  if (args) {
    if (args.dayOfWeek !== undefined) {
      this.dayOfWeek = args.dayOfWeek;
    }
    if (args.timeSlots !== undefined) {
      this.timeSlots = args.timeSlots;
    }
  }
};
Schedule.prototype = {};
Schedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dayOfWeek = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.timeSlots = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.TimeWindow();
          elem78.read(input);
          this.timeSlots.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schedule.prototype.write = function(output) {
  output.writeStructBegin('Schedule');
  if (this.dayOfWeek !== null && this.dayOfWeek !== undefined) {
    output.writeFieldBegin('dayOfWeek', Thrift.Type.I32, 1);
    output.writeI32(this.dayOfWeek);
    output.writeFieldEnd();
  }
  if (this.timeSlots !== null && this.timeSlots !== undefined) {
    output.writeFieldBegin('timeSlots', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.timeSlots.length);
    for (var iter79 in this.timeSlots)
    {
      if (this.timeSlots.hasOwnProperty(iter79))
      {
        iter79 = this.timeSlots[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdGroupPricing = module.exports.AdGroupPricing = function(args) {
  this.priceType = null;
  this.bidValue = null;
  this.recommendedBidValue = null;
  this.dailySpendLimit = null;
  this.dynamicBidEnabled = null;
  this.slackEnabled = null;
  if (args) {
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.bidValue !== undefined) {
      this.bidValue = args.bidValue;
    }
    if (args.recommendedBidValue !== undefined) {
      this.recommendedBidValue = args.recommendedBidValue;
    }
    if (args.dailySpendLimit !== undefined) {
      this.dailySpendLimit = args.dailySpendLimit;
    }
    if (args.dynamicBidEnabled !== undefined) {
      this.dynamicBidEnabled = args.dynamicBidEnabled;
    }
    if (args.slackEnabled !== undefined) {
      this.slackEnabled = args.slackEnabled;
    }
  }
};
AdGroupPricing.prototype = {};
AdGroupPricing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bidValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.recommendedBidValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dailySpendLimit = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.dynamicBidEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.slackEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdGroupPricing.prototype.write = function(output) {
  output.writeStructBegin('AdGroupPricing');
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 1);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.bidValue !== null && this.bidValue !== undefined) {
    output.writeFieldBegin('bidValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.bidValue);
    output.writeFieldEnd();
  }
  if (this.recommendedBidValue !== null && this.recommendedBidValue !== undefined) {
    output.writeFieldBegin('recommendedBidValue', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.recommendedBidValue);
    output.writeFieldEnd();
  }
  if (this.dailySpendLimit !== null && this.dailySpendLimit !== undefined) {
    output.writeFieldBegin('dailySpendLimit', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.dailySpendLimit);
    output.writeFieldEnd();
  }
  if (this.dynamicBidEnabled !== null && this.dynamicBidEnabled !== undefined) {
    output.writeFieldBegin('dynamicBidEnabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.dynamicBidEnabled);
    output.writeFieldEnd();
  }
  if (this.slackEnabled !== null && this.slackEnabled !== undefined) {
    output.writeFieldBegin('slackEnabled', Thrift.Type.BOOL, 6);
    output.writeBool(this.slackEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdGroupConstraint = module.exports.AdGroupConstraint = function(args) {
  this.frequencyCap = null;
  this.frequencyDurationInMinutes = null;
  this.guaranteedDeliveryEnabled = null;
  this.deliveryPacingEnabled = null;
  this.minDailyGuaranteedImpression = null;
  this.targetCPA = null;
  this.appFeedbackEnabled = null;
  this.targetBillableUsersOnly = null;
  if (args) {
    if (args.frequencyCap !== undefined) {
      this.frequencyCap = args.frequencyCap;
    }
    if (args.frequencyDurationInMinutes !== undefined) {
      this.frequencyDurationInMinutes = args.frequencyDurationInMinutes;
    }
    if (args.guaranteedDeliveryEnabled !== undefined) {
      this.guaranteedDeliveryEnabled = args.guaranteedDeliveryEnabled;
    }
    if (args.deliveryPacingEnabled !== undefined) {
      this.deliveryPacingEnabled = args.deliveryPacingEnabled;
    }
    if (args.minDailyGuaranteedImpression !== undefined) {
      this.minDailyGuaranteedImpression = args.minDailyGuaranteedImpression;
    }
    if (args.targetCPA !== undefined) {
      this.targetCPA = args.targetCPA;
    }
    if (args.appFeedbackEnabled !== undefined) {
      this.appFeedbackEnabled = args.appFeedbackEnabled;
    }
    if (args.targetBillableUsersOnly !== undefined) {
      this.targetBillableUsersOnly = args.targetBillableUsersOnly;
    }
  }
};
AdGroupConstraint.prototype = {};
AdGroupConstraint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.frequencyCap = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.frequencyDurationInMinutes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.guaranteedDeliveryEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.deliveryPacingEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.minDailyGuaranteedImpression = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.targetCPA = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.appFeedbackEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.targetBillableUsersOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdGroupConstraint.prototype.write = function(output) {
  output.writeStructBegin('AdGroupConstraint');
  if (this.frequencyCap !== null && this.frequencyCap !== undefined) {
    output.writeFieldBegin('frequencyCap', Thrift.Type.I32, 1);
    output.writeI32(this.frequencyCap);
    output.writeFieldEnd();
  }
  if (this.frequencyDurationInMinutes !== null && this.frequencyDurationInMinutes !== undefined) {
    output.writeFieldBegin('frequencyDurationInMinutes', Thrift.Type.I32, 2);
    output.writeI32(this.frequencyDurationInMinutes);
    output.writeFieldEnd();
  }
  if (this.guaranteedDeliveryEnabled !== null && this.guaranteedDeliveryEnabled !== undefined) {
    output.writeFieldBegin('guaranteedDeliveryEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.guaranteedDeliveryEnabled);
    output.writeFieldEnd();
  }
  if (this.deliveryPacingEnabled !== null && this.deliveryPacingEnabled !== undefined) {
    output.writeFieldBegin('deliveryPacingEnabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.deliveryPacingEnabled);
    output.writeFieldEnd();
  }
  if (this.minDailyGuaranteedImpression !== null && this.minDailyGuaranteedImpression !== undefined) {
    output.writeFieldBegin('minDailyGuaranteedImpression', Thrift.Type.BOOL, 5);
    output.writeBool(this.minDailyGuaranteedImpression);
    output.writeFieldEnd();
  }
  if (this.targetCPA !== null && this.targetCPA !== undefined) {
    output.writeFieldBegin('targetCPA', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.targetCPA);
    output.writeFieldEnd();
  }
  if (this.appFeedbackEnabled !== null && this.appFeedbackEnabled !== undefined) {
    output.writeFieldBegin('appFeedbackEnabled', Thrift.Type.BOOL, 7);
    output.writeBool(this.appFeedbackEnabled);
    output.writeFieldEnd();
  }
  if (this.targetBillableUsersOnly !== null && this.targetBillableUsersOnly !== undefined) {
    output.writeFieldBegin('targetBillableUsersOnly', Thrift.Type.BOOL, 8);
    output.writeBool(this.targetBillableUsersOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdGroupBasic = module.exports.AdGroupBasic = function(args) {
  this.name = null;
  this.objectiveId = null;
  this.richMediaEnabled = null;
  this.clickToAction = null;
  this.ctaDestination = null;
  this.finalLandingURL = null;
  this.appId = null;
  this.startTime = null;
  this.endTime = null;
  this.trackingPartnerId = null;
  this.appMarketPlaceId = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.objectiveId !== undefined) {
      this.objectiveId = args.objectiveId;
    }
    if (args.richMediaEnabled !== undefined) {
      this.richMediaEnabled = args.richMediaEnabled;
    }
    if (args.clickToAction !== undefined) {
      this.clickToAction = args.clickToAction;
    }
    if (args.ctaDestination !== undefined) {
      this.ctaDestination = args.ctaDestination;
    }
    if (args.finalLandingURL !== undefined) {
      this.finalLandingURL = args.finalLandingURL;
    }
    if (args.appId !== undefined) {
      this.appId = args.appId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.trackingPartnerId !== undefined) {
      this.trackingPartnerId = args.trackingPartnerId;
    }
    if (args.appMarketPlaceId !== undefined) {
      this.appMarketPlaceId = args.appMarketPlaceId;
    }
  }
};
AdGroupBasic.prototype = {};
AdGroupBasic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.objectiveId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.richMediaEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.clickToAction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ctaDestination = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.finalLandingURL = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTime = new ttypes.DateTime();
        this.startTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.endTime = new ttypes.DateTime();
        this.endTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.trackingPartnerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.appMarketPlaceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdGroupBasic.prototype.write = function(output) {
  output.writeStructBegin('AdGroupBasic');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.objectiveId !== null && this.objectiveId !== undefined) {
    output.writeFieldBegin('objectiveId', Thrift.Type.I32, 2);
    output.writeI32(this.objectiveId);
    output.writeFieldEnd();
  }
  if (this.richMediaEnabled !== null && this.richMediaEnabled !== undefined) {
    output.writeFieldBegin('richMediaEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.richMediaEnabled);
    output.writeFieldEnd();
  }
  if (this.clickToAction !== null && this.clickToAction !== undefined) {
    output.writeFieldBegin('clickToAction', Thrift.Type.I32, 4);
    output.writeI32(this.clickToAction);
    output.writeFieldEnd();
  }
  if (this.ctaDestination !== null && this.ctaDestination !== undefined) {
    output.writeFieldBegin('ctaDestination', Thrift.Type.STRING, 5);
    output.writeString(this.ctaDestination);
    output.writeFieldEnd();
  }
  if (this.finalLandingURL !== null && this.finalLandingURL !== undefined) {
    output.writeFieldBegin('finalLandingURL', Thrift.Type.STRING, 6);
    output.writeString(this.finalLandingURL);
    output.writeFieldEnd();
  }
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 7);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRUCT, 8);
    this.startTime.write(output);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRUCT, 9);
    this.endTime.write(output);
    output.writeFieldEnd();
  }
  if (this.trackingPartnerId !== null && this.trackingPartnerId !== undefined) {
    output.writeFieldBegin('trackingPartnerId', Thrift.Type.I32, 10);
    output.writeI32(this.trackingPartnerId);
    output.writeFieldEnd();
  }
  if (this.appMarketPlaceId !== null && this.appMarketPlaceId !== undefined) {
    output.writeFieldBegin('appMarketPlaceId', Thrift.Type.I32, 11);
    output.writeI32(this.appMarketPlaceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdGroupMeta = module.exports.AdGroupMeta = function(args) {
  this.businessClassification = null;
  this.categoryIds = null;
  this.tagIds = null;
  if (args) {
    if (args.businessClassification !== undefined) {
      this.businessClassification = args.businessClassification;
    }
    if (args.categoryIds !== undefined) {
      this.categoryIds = args.categoryIds;
    }
    if (args.tagIds !== undefined) {
      this.tagIds = args.tagIds;
    }
  }
};
AdGroupMeta.prototype = {};
AdGroupMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.businessClassification = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.categoryIds = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI32();
          this.categoryIds.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.tagIds = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = input.readI32();
          this.tagIds.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdGroupMeta.prototype.write = function(output) {
  output.writeStructBegin('AdGroupMeta');
  if (this.businessClassification !== null && this.businessClassification !== undefined) {
    output.writeFieldBegin('businessClassification', Thrift.Type.I32, 1);
    output.writeI32(this.businessClassification);
    output.writeFieldEnd();
  }
  if (this.categoryIds !== null && this.categoryIds !== undefined) {
    output.writeFieldBegin('categoryIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.categoryIds.length);
    for (var iter94 in this.categoryIds)
    {
      if (this.categoryIds.hasOwnProperty(iter94))
      {
        iter94 = this.categoryIds[iter94];
        output.writeI32(iter94);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tagIds !== null && this.tagIds !== undefined) {
    output.writeFieldBegin('tagIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.tagIds.length);
    for (var iter95 in this.tagIds)
    {
      if (this.tagIds.hasOwnProperty(iter95))
      {
        iter95 = this.tagIds[iter95];
        output.writeI32(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TrackingCode = module.exports.TrackingCode = function(args) {
  this.trackingCodeType = null;
  this.trackingCodeValue = null;
  if (args) {
    if (args.trackingCodeType !== undefined) {
      this.trackingCodeType = args.trackingCodeType;
    }
    if (args.trackingCodeValue !== undefined) {
      this.trackingCodeValue = args.trackingCodeValue;
    }
  }
};
TrackingCode.prototype = {};
TrackingCode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.trackingCodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trackingCodeValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TrackingCode.prototype.write = function(output) {
  output.writeStructBegin('TrackingCode');
  if (this.trackingCodeType !== null && this.trackingCodeType !== undefined) {
    output.writeFieldBegin('trackingCodeType', Thrift.Type.I32, 1);
    output.writeI32(this.trackingCodeType);
    output.writeFieldEnd();
  }
  if (this.trackingCodeValue !== null && this.trackingCodeValue !== undefined) {
    output.writeFieldBegin('trackingCodeValue', Thrift.Type.STRING, 2);
    output.writeString(this.trackingCodeValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdBasic = module.exports.AdBasic = function(args) {
  this.adGroupId = null;
  this.name = null;
  this.adFormat = null;
  this.trackingCodes = null;
  this.customHeader = null;
  if (args) {
    if (args.adGroupId !== undefined) {
      this.adGroupId = args.adGroupId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.adFormat !== undefined) {
      this.adFormat = args.adFormat;
    }
    if (args.trackingCodes !== undefined) {
      this.trackingCodes = args.trackingCodes;
    }
    if (args.customHeader !== undefined) {
      this.customHeader = args.customHeader;
    }
  }
};
AdBasic.prototype = {};
AdBasic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.adGroupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.adFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.trackingCodes = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.TrackingCode();
          elem102.read(input);
          this.trackingCodes.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.customHeader = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdBasic.prototype.write = function(output) {
  output.writeStructBegin('AdBasic');
  if (this.adGroupId !== null && this.adGroupId !== undefined) {
    output.writeFieldBegin('adGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.adGroupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.adFormat !== null && this.adFormat !== undefined) {
    output.writeFieldBegin('adFormat', Thrift.Type.I32, 3);
    output.writeI32(this.adFormat);
    output.writeFieldEnd();
  }
  if (this.trackingCodes !== null && this.trackingCodes !== undefined) {
    output.writeFieldBegin('trackingCodes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.trackingCodes.length);
    for (var iter103 in this.trackingCodes)
    {
      if (this.trackingCodes.hasOwnProperty(iter103))
      {
        iter103 = this.trackingCodes[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customHeader !== null && this.customHeader !== undefined) {
    output.writeFieldBegin('customHeader', Thrift.Type.STRING, 5);
    output.writeString(this.customHeader);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleAd = module.exports.SimpleAd = function(args) {
  this.adBasic = null;
  this.adValue = null;
  if (args) {
    if (args.adBasic !== undefined) {
      this.adBasic = args.adBasic;
    }
    if (args.adValue !== undefined) {
      this.adValue = args.adValue;
    }
  }
};
SimpleAd.prototype = {};
SimpleAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adBasic = new ttypes.AdBasic();
        this.adBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleAd.prototype.write = function(output) {
  output.writeStructBegin('SimpleAd');
  if (this.adBasic !== null && this.adBasic !== undefined) {
    output.writeFieldBegin('adBasic', Thrift.Type.STRUCT, 1);
    this.adBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.adValue !== null && this.adValue !== undefined) {
    output.writeFieldBegin('adValue', Thrift.Type.STRING, 2);
    output.writeString(this.adValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BannerAd = module.exports.BannerAd = function(args) {
  this.adBasic = null;
  this.contentId = null;
  this.altText = null;
  if (args) {
    if (args.adBasic !== undefined) {
      this.adBasic = args.adBasic;
    }
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    }
    if (args.altText !== undefined) {
      this.altText = args.altText;
    }
  }
};
BannerAd.prototype = {};
BannerAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adBasic = new ttypes.AdBasic();
        this.adBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.altText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerAd.prototype.write = function(output) {
  output.writeStructBegin('BannerAd');
  if (this.adBasic !== null && this.adBasic !== undefined) {
    output.writeFieldBegin('adBasic', Thrift.Type.STRUCT, 1);
    this.adBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.I32, 2);
    output.writeI32(this.contentId);
    output.writeFieldEnd();
  }
  if (this.altText !== null && this.altText !== undefined) {
    output.writeFieldBegin('altText', Thrift.Type.STRING, 3);
    output.writeString(this.altText);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RichMediaAd = module.exports.RichMediaAd = function(args) {
  this.adBasic = null;
  this.contentId = null;
  this.altText = null;
  this.sdkCapabilities = null;
  if (args) {
    if (args.adBasic !== undefined) {
      this.adBasic = args.adBasic;
    }
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    }
    if (args.altText !== undefined) {
      this.altText = args.altText;
    }
    if (args.sdkCapabilities !== undefined) {
      this.sdkCapabilities = args.sdkCapabilities;
    }
  }
};
RichMediaAd.prototype = {};
RichMediaAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adBasic = new ttypes.AdBasic();
        this.adBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.altText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.sdkCapabilities = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readI32();
          this.sdkCapabilities.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RichMediaAd.prototype.write = function(output) {
  output.writeStructBegin('RichMediaAd');
  if (this.adBasic !== null && this.adBasic !== undefined) {
    output.writeFieldBegin('adBasic', Thrift.Type.STRUCT, 1);
    this.adBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.I32, 2);
    output.writeI32(this.contentId);
    output.writeFieldEnd();
  }
  if (this.altText !== null && this.altText !== undefined) {
    output.writeFieldBegin('altText', Thrift.Type.STRING, 3);
    output.writeString(this.altText);
    output.writeFieldEnd();
  }
  if (this.sdkCapabilities !== null && this.sdkCapabilities !== undefined) {
    output.writeFieldBegin('sdkCapabilities', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.sdkCapabilities.length);
    for (var iter111 in this.sdkCapabilities)
    {
      if (this.sdkCapabilities.hasOwnProperty(iter111))
      {
        iter111 = this.sdkCapabilities[iter111];
        output.writeI32(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RichMediaCreative = module.exports.RichMediaCreative = function(args) {
  this.contentProvider = null;
  this.rmValue = null;
  this.contentType = null;
  this.rmFormat = null;
  this.externalId = null;
  this.initialSlotId = null;
  if (args) {
    if (args.contentProvider !== undefined) {
      this.contentProvider = args.contentProvider;
    }
    if (args.rmValue !== undefined) {
      this.rmValue = args.rmValue;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
    if (args.rmFormat !== undefined) {
      this.rmFormat = args.rmFormat;
    }
    if (args.externalId !== undefined) {
      this.externalId = args.externalId;
    }
    if (args.initialSlotId !== undefined) {
      this.initialSlotId = args.initialSlotId;
    }
  }
};
RichMediaCreative.prototype = {};
RichMediaCreative.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.contentProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rmValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rmFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.externalId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.initialSlotId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RichMediaCreative.prototype.write = function(output) {
  output.writeStructBegin('RichMediaCreative');
  if (this.contentProvider !== null && this.contentProvider !== undefined) {
    output.writeFieldBegin('contentProvider', Thrift.Type.I32, 1);
    output.writeI32(this.contentProvider);
    output.writeFieldEnd();
  }
  if (this.rmValue !== null && this.rmValue !== undefined) {
    output.writeFieldBegin('rmValue', Thrift.Type.STRING, 2);
    output.writeString(this.rmValue);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 3);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.rmFormat !== null && this.rmFormat !== undefined) {
    output.writeFieldBegin('rmFormat', Thrift.Type.I32, 4);
    output.writeI32(this.rmFormat);
    output.writeFieldEnd();
  }
  if (this.externalId !== null && this.externalId !== undefined) {
    output.writeFieldBegin('externalId', Thrift.Type.STRING, 5);
    output.writeString(this.externalId);
    output.writeFieldEnd();
  }
  if (this.initialSlotId !== null && this.initialSlotId !== undefined) {
    output.writeFieldBegin('initialSlotId', Thrift.Type.I32, 6);
    output.writeI32(this.initialSlotId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Image = module.exports.Image = function(args) {
  this.slotId = null;
  this.content = null;
  this.mimeType = null;
  if (args) {
    if (args.slotId !== undefined) {
      this.slotId = args.slotId;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.mimeType !== undefined) {
      this.mimeType = args.mimeType;
    }
  }
};
Image.prototype = {};
Image.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.slotId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Image.prototype.write = function(output) {
  output.writeStructBegin('Image');
  if (this.slotId !== null && this.slotId !== undefined) {
    output.writeFieldBegin('slotId', Thrift.Type.I32, 1);
    output.writeI32(this.slotId);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 3);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BannerCreative = module.exports.BannerCreative = function(args) {
  this.altText = null;
  this.images = null;
  if (args) {
    if (args.altText !== undefined) {
      this.altText = args.altText;
    }
    if (args.images !== undefined) {
      this.images = args.images;
    }
  }
};
BannerCreative.prototype = {};
BannerCreative.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.altText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.images = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Image();
          elem118.read(input);
          this.images.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerCreative.prototype.write = function(output) {
  output.writeStructBegin('BannerCreative');
  if (this.altText !== null && this.altText !== undefined) {
    output.writeFieldBegin('altText', Thrift.Type.STRING, 1);
    output.writeString(this.altText);
    output.writeFieldEnd();
  }
  if (this.images !== null && this.images !== undefined) {
    output.writeFieldBegin('images', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.images.length);
    for (var iter119 in this.images)
    {
      if (this.images.hasOwnProperty(iter119))
      {
        iter119 = this.images[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


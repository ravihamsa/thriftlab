//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.AdvObjective = {
'PROMOTE_APP' : 1,
'GENERATE_LEADS' : 2,
'PROMOTE_CONTENT' : 3,
'GENERATE_AWARENESS' : 4
};
AdvReadContext = module.exports.AdvReadContext = function(args) {
  this.accountId = null;
  this.userId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AdvReadContext.prototype = {};
AdvReadContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvReadContext.prototype.write = function(output) {
  output.writeStructBegin('AdvReadContext');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvWriteContext = module.exports.AdvWriteContext = function(args) {
  this.appSourceId = null;
  this.accountId = null;
  this.userId = null;
  this.correlationId = null;
  if (args) {
    if (args.appSourceId !== undefined) {
      this.appSourceId = args.appSourceId;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.correlationId !== undefined) {
      this.correlationId = args.correlationId;
    }
  }
};
AdvWriteContext.prototype = {};
AdvWriteContext.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appSourceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.correlationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvWriteContext.prototype.write = function(output) {
  output.writeStructBegin('AdvWriteContext');
  if (this.appSourceId !== null && this.appSourceId !== undefined) {
    output.writeFieldBegin('appSourceId', Thrift.Type.I32, 1);
    output.writeI32(this.appSourceId);
    output.writeFieldEnd();
  }
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.correlationId !== null && this.correlationId !== undefined) {
    output.writeFieldBegin('correlationId', Thrift.Type.STRING, 4);
    output.writeString(this.correlationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvBudgetConstraint = module.exports.AdvBudgetConstraint = function(args) {
  this.dailyLimit = null;
  this.dynamicDailyLimit = null;
  this.dailyLeewayPercentage = null;
  this.dailyLimitInherited = null;
  if (args) {
    if (args.dailyLimit !== undefined) {
      this.dailyLimit = args.dailyLimit;
    }
    if (args.dynamicDailyLimit !== undefined) {
      this.dynamicDailyLimit = args.dynamicDailyLimit;
    }
    if (args.dailyLeewayPercentage !== undefined) {
      this.dailyLeewayPercentage = args.dailyLeewayPercentage;
    }
    if (args.dailyLimitInherited !== undefined) {
      this.dailyLimitInherited = args.dailyLimitInherited;
    }
  }
};
AdvBudgetConstraint.prototype = {};
AdvBudgetConstraint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dailyLimit = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.dynamicDailyLimit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dailyLeewayPercentage = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.dailyLimitInherited = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvBudgetConstraint.prototype.write = function(output) {
  output.writeStructBegin('AdvBudgetConstraint');
  if (this.dailyLimit !== null && this.dailyLimit !== undefined) {
    output.writeFieldBegin('dailyLimit', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.dailyLimit);
    output.writeFieldEnd();
  }
  if (this.dynamicDailyLimit !== null && this.dynamicDailyLimit !== undefined) {
    output.writeFieldBegin('dynamicDailyLimit', Thrift.Type.BOOL, 2);
    output.writeBool(this.dynamicDailyLimit);
    output.writeFieldEnd();
  }
  if (this.dailyLeewayPercentage !== null && this.dailyLeewayPercentage !== undefined) {
    output.writeFieldBegin('dailyLeewayPercentage', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.dailyLeewayPercentage);
    output.writeFieldEnd();
  }
  if (this.dailyLimitInherited !== null && this.dailyLimitInherited !== undefined) {
    output.writeFieldBegin('dailyLimitInherited', Thrift.Type.BOOL, 4);
    output.writeBool(this.dailyLimitInherited);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvCampaign = module.exports.AdvCampaign = function(args) {
  this.accountId = null;
  this.demandSource = null;
  this.name = null;
  this.startDate = null;
  this.endDate = null;
  this.budgetType = null;
  this.budget = null;
  this.budgetConstraint = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.demandSource !== undefined) {
      this.demandSource = args.demandSource;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.startDate !== undefined) {
      this.startDate = args.startDate;
    }
    if (args.endDate !== undefined) {
      this.endDate = args.endDate;
    }
    if (args.budgetType !== undefined) {
      this.budgetType = args.budgetType;
    }
    if (args.budget !== undefined) {
      this.budget = args.budget;
    }
    if (args.budgetConstraint !== undefined) {
      this.budgetConstraint = args.budgetConstraint;
    }
  }
};
AdvCampaign.prototype = {};
AdvCampaign.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.demandSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.startDate = new DemandModel_ttypes.DateTime();
        this.startDate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.endDate = new DemandModel_ttypes.DateTime();
        this.endDate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.budgetType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.budget = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.budgetConstraint = new ttypes.AdvBudgetConstraint();
        this.budgetConstraint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvCampaign.prototype.write = function(output) {
  output.writeStructBegin('AdvCampaign');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.demandSource !== null && this.demandSource !== undefined) {
    output.writeFieldBegin('demandSource', Thrift.Type.I32, 2);
    output.writeI32(this.demandSource);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.STRUCT, 4);
    this.startDate.write(output);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.STRUCT, 5);
    this.endDate.write(output);
    output.writeFieldEnd();
  }
  if (this.budgetType !== null && this.budgetType !== undefined) {
    output.writeFieldBegin('budgetType', Thrift.Type.I32, 6);
    output.writeI32(this.budgetType);
    output.writeFieldEnd();
  }
  if (this.budget !== null && this.budget !== undefined) {
    output.writeFieldBegin('budget', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.budget);
    output.writeFieldEnd();
  }
  if (this.budgetConstraint !== null && this.budgetConstraint !== undefined) {
    output.writeFieldBegin('budgetConstraint', Thrift.Type.STRUCT, 8);
    this.budgetConstraint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvLatLongDetail = module.exports.AdvLatLongDetail = function(args) {
  this.name = null;
  this.latitude = null;
  this.longitude = null;
  this.radius = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.radius !== undefined) {
      this.radius = args.radius;
    }
  }
};
AdvLatLongDetail.prototype = {};
AdvLatLongDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radius = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvLatLongDetail.prototype.write = function(output) {
  output.writeStructBegin('AdvLatLongDetail');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.radius !== null && this.radius !== undefined) {
    output.writeFieldBegin('radius', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.radius);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvGeoCarrierTargetingDetail = module.exports.AdvGeoCarrierTargetingDetail = function(args) {
  this.countryId = null;
  this.stateIds = null;
  this.cityIds = null;
  this.carrierIds = null;
  this.zipIds = null;
  this.latLongDetails = null;
  if (args) {
    if (args.countryId !== undefined) {
      this.countryId = args.countryId;
    }
    if (args.stateIds !== undefined) {
      this.stateIds = args.stateIds;
    }
    if (args.cityIds !== undefined) {
      this.cityIds = args.cityIds;
    }
    if (args.carrierIds !== undefined) {
      this.carrierIds = args.carrierIds;
    }
    if (args.zipIds !== undefined) {
      this.zipIds = args.zipIds;
    }
    if (args.latLongDetails !== undefined) {
      this.latLongDetails = args.latLongDetails;
    }
  }
};
AdvGeoCarrierTargetingDetail.prototype = {};
AdvGeoCarrierTargetingDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.countryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.stateIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.stateIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.cityIds = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32();
          this.cityIds.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.carrierIds = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI64();
          this.carrierIds.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.zipIds = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI32();
          this.zipIds.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.latLongDetails = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new ttypes.AdvLatLongDetail();
          elem34.read(input);
          this.latLongDetails.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvGeoCarrierTargetingDetail.prototype.write = function(output) {
  output.writeStructBegin('AdvGeoCarrierTargetingDetail');
  if (this.countryId !== null && this.countryId !== undefined) {
    output.writeFieldBegin('countryId', Thrift.Type.I32, 1);
    output.writeI32(this.countryId);
    output.writeFieldEnd();
  }
  if (this.stateIds !== null && this.stateIds !== undefined) {
    output.writeFieldBegin('stateIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.stateIds.length);
    for (var iter35 in this.stateIds)
    {
      if (this.stateIds.hasOwnProperty(iter35))
      {
        iter35 = this.stateIds[iter35];
        output.writeI32(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cityIds !== null && this.cityIds !== undefined) {
    output.writeFieldBegin('cityIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.cityIds.length);
    for (var iter36 in this.cityIds)
    {
      if (this.cityIds.hasOwnProperty(iter36))
      {
        iter36 = this.cityIds[iter36];
        output.writeI32(iter36);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.carrierIds !== null && this.carrierIds !== undefined) {
    output.writeFieldBegin('carrierIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I64, this.carrierIds.length);
    for (var iter37 in this.carrierIds)
    {
      if (this.carrierIds.hasOwnProperty(iter37))
      {
        iter37 = this.carrierIds[iter37];
        output.writeI64(iter37);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.zipIds !== null && this.zipIds !== undefined) {
    output.writeFieldBegin('zipIds', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.zipIds.length);
    for (var iter38 in this.zipIds)
    {
      if (this.zipIds.hasOwnProperty(iter38))
      {
        iter38 = this.zipIds[iter38];
        output.writeI32(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.latLongDetails !== null && this.latLongDetails !== undefined) {
    output.writeFieldBegin('latLongDetails', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.latLongDetails.length);
    for (var iter39 in this.latLongDetails)
    {
      if (this.latLongDetails.hasOwnProperty(iter39))
      {
        iter39 = this.latLongDetails[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvOSDetail = module.exports.AdvOSDetail = function(args) {
  this.osId = null;
  this.maximumMajorVersion = null;
  this.minimumMajorVersion = null;
  this.selectionMode = null;
  if (args) {
    if (args.osId !== undefined) {
      this.osId = args.osId;
    }
    if (args.maximumMajorVersion !== undefined) {
      this.maximumMajorVersion = args.maximumMajorVersion;
    }
    if (args.minimumMajorVersion !== undefined) {
      this.minimumMajorVersion = args.minimumMajorVersion;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
AdvOSDetail.prototype = {};
AdvOSDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.osId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maximumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.minimumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvOSDetail.prototype.write = function(output) {
  output.writeStructBegin('AdvOSDetail');
  if (this.osId !== null && this.osId !== undefined) {
    output.writeFieldBegin('osId', Thrift.Type.I32, 1);
    output.writeI32(this.osId);
    output.writeFieldEnd();
  }
  if (this.maximumMajorVersion !== null && this.maximumMajorVersion !== undefined) {
    output.writeFieldBegin('maximumMajorVersion', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.maximumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.minimumMajorVersion !== null && this.minimumMajorVersion !== undefined) {
    output.writeFieldBegin('minimumMajorVersion', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.minimumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 4);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvManufacturerDetail = module.exports.AdvManufacturerDetail = function(args) {
  this.manufacturerId = null;
  this.handsetIds = null;
  this.selectionMode = null;
  if (args) {
    if (args.manufacturerId !== undefined) {
      this.manufacturerId = args.manufacturerId;
    }
    if (args.handsetIds !== undefined) {
      this.handsetIds = args.handsetIds;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
AdvManufacturerDetail.prototype = {};
AdvManufacturerDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.manufacturerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.handsetIds = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32();
          this.handsetIds.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvManufacturerDetail.prototype.write = function(output) {
  output.writeStructBegin('AdvManufacturerDetail');
  if (this.manufacturerId !== null && this.manufacturerId !== undefined) {
    output.writeFieldBegin('manufacturerId', Thrift.Type.I32, 1);
    output.writeI32(this.manufacturerId);
    output.writeFieldEnd();
  }
  if (this.handsetIds !== null && this.handsetIds !== undefined) {
    output.writeFieldBegin('handsetIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.handsetIds.length);
    for (var iter47 in this.handsetIds)
    {
      if (this.handsetIds.hasOwnProperty(iter47))
      {
        iter47 = this.handsetIds[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 3);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvDeviceDetail = module.exports.AdvDeviceDetail = function(args) {
  this.osDetails = null;
  this.manufacturerDetails = null;
  this.deviceTypes = null;
  this.selectionMode = 1;
  if (args) {
    if (args.osDetails !== undefined) {
      this.osDetails = args.osDetails;
    }
    if (args.manufacturerDetails !== undefined) {
      this.manufacturerDetails = args.manufacturerDetails;
    }
    if (args.deviceTypes !== undefined) {
      this.deviceTypes = args.deviceTypes;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
AdvDeviceDetail.prototype = {};
AdvDeviceDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.osDetails = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.AdvOSDetail();
          elem54.read(input);
          this.osDetails.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.manufacturerDetails = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = new ttypes.AdvManufacturerDetail();
          elem61.read(input);
          this.manufacturerDetails.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.deviceTypes = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readI32();
          this.deviceTypes.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvDeviceDetail.prototype.write = function(output) {
  output.writeStructBegin('AdvDeviceDetail');
  if (this.osDetails !== null && this.osDetails !== undefined) {
    output.writeFieldBegin('osDetails', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.osDetails.length);
    for (var iter69 in this.osDetails)
    {
      if (this.osDetails.hasOwnProperty(iter69))
      {
        iter69 = this.osDetails[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.manufacturerDetails !== null && this.manufacturerDetails !== undefined) {
    output.writeFieldBegin('manufacturerDetails', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.manufacturerDetails.length);
    for (var iter70 in this.manufacturerDetails)
    {
      if (this.manufacturerDetails.hasOwnProperty(iter70))
      {
        iter70 = this.manufacturerDetails[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deviceTypes !== null && this.deviceTypes !== undefined) {
    output.writeFieldBegin('deviceTypes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.deviceTypes.length);
    for (var iter71 in this.deviceTypes)
    {
      if (this.deviceTypes.hasOwnProperty(iter71))
      {
        iter71 = this.deviceTypes[iter71];
        output.writeI32(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 4);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvBrowser = module.exports.AdvBrowser = function(args) {
  this.browserId = null;
  this.maximumMajorVersion = null;
  this.minimumMajorVersion = null;
  this.selectionMode = null;
  if (args) {
    if (args.browserId !== undefined) {
      this.browserId = args.browserId;
    }
    if (args.maximumMajorVersion !== undefined) {
      this.maximumMajorVersion = args.maximumMajorVersion;
    }
    if (args.minimumMajorVersion !== undefined) {
      this.minimumMajorVersion = args.minimumMajorVersion;
    }
    if (args.selectionMode !== undefined) {
      this.selectionMode = args.selectionMode;
    }
  }
};
AdvBrowser.prototype = {};
AdvBrowser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.browserId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maximumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.minimumMajorVersion = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.selectionMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvBrowser.prototype.write = function(output) {
  output.writeStructBegin('AdvBrowser');
  if (this.browserId !== null && this.browserId !== undefined) {
    output.writeFieldBegin('browserId', Thrift.Type.I32, 1);
    output.writeI32(this.browserId);
    output.writeFieldEnd();
  }
  if (this.maximumMajorVersion !== null && this.maximumMajorVersion !== undefined) {
    output.writeFieldBegin('maximumMajorVersion', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.maximumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.minimumMajorVersion !== null && this.minimumMajorVersion !== undefined) {
    output.writeFieldBegin('minimumMajorVersion', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.minimumMajorVersion);
    output.writeFieldEnd();
  }
  if (this.selectionMode !== null && this.selectionMode !== undefined) {
    output.writeFieldBegin('selectionMode', Thrift.Type.I32, 4);
    output.writeI32(this.selectionMode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvSchedule = module.exports.AdvSchedule = function(args) {
  this.dayOfWeek = null;
  this.timeSlots = null;
  if (args) {
    if (args.dayOfWeek !== undefined) {
      this.dayOfWeek = args.dayOfWeek;
    }
    if (args.timeSlots !== undefined) {
      this.timeSlots = args.timeSlots;
    }
  }
};
AdvSchedule.prototype = {};
AdvSchedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dayOfWeek = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.timeSlots = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new DemandModel_ttypes.TimeWindow();
          elem78.read(input);
          this.timeSlots.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvSchedule.prototype.write = function(output) {
  output.writeStructBegin('AdvSchedule');
  if (this.dayOfWeek !== null && this.dayOfWeek !== undefined) {
    output.writeFieldBegin('dayOfWeek', Thrift.Type.I32, 1);
    output.writeI32(this.dayOfWeek);
    output.writeFieldEnd();
  }
  if (this.timeSlots !== null && this.timeSlots !== undefined) {
    output.writeFieldBegin('timeSlots', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.timeSlots.length);
    for (var iter79 in this.timeSlots)
    {
      if (this.timeSlots.hasOwnProperty(iter79))
      {
        iter79 = this.timeSlots[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvAdGroupPricing = module.exports.AdvAdGroupPricing = function(args) {
  this.priceType = null;
  this.bidValue = null;
  this.dailySpend = null;
  this.dynamicBidEnabled = null;
  this.slackEnabled = null;
  this.recommendedBid = null;
  if (args) {
    if (args.priceType !== undefined) {
      this.priceType = args.priceType;
    }
    if (args.bidValue !== undefined) {
      this.bidValue = args.bidValue;
    }
    if (args.dailySpend !== undefined) {
      this.dailySpend = args.dailySpend;
    }
    if (args.dynamicBidEnabled !== undefined) {
      this.dynamicBidEnabled = args.dynamicBidEnabled;
    }
    if (args.slackEnabled !== undefined) {
      this.slackEnabled = args.slackEnabled;
    }
    if (args.recommendedBid !== undefined) {
      this.recommendedBid = args.recommendedBid;
    }
  }
};
AdvAdGroupPricing.prototype = {};
AdvAdGroupPricing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.priceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bidValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dailySpend = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.dynamicBidEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.slackEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.recommendedBid = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvAdGroupPricing.prototype.write = function(output) {
  output.writeStructBegin('AdvAdGroupPricing');
  if (this.priceType !== null && this.priceType !== undefined) {
    output.writeFieldBegin('priceType', Thrift.Type.I32, 1);
    output.writeI32(this.priceType);
    output.writeFieldEnd();
  }
  if (this.bidValue !== null && this.bidValue !== undefined) {
    output.writeFieldBegin('bidValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.bidValue);
    output.writeFieldEnd();
  }
  if (this.dailySpend !== null && this.dailySpend !== undefined) {
    output.writeFieldBegin('dailySpend', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.dailySpend);
    output.writeFieldEnd();
  }
  if (this.dynamicBidEnabled !== null && this.dynamicBidEnabled !== undefined) {
    output.writeFieldBegin('dynamicBidEnabled', Thrift.Type.BOOL, 4);
    output.writeBool(this.dynamicBidEnabled);
    output.writeFieldEnd();
  }
  if (this.slackEnabled !== null && this.slackEnabled !== undefined) {
    output.writeFieldBegin('slackEnabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.slackEnabled);
    output.writeFieldEnd();
  }
  if (this.recommendedBid !== null && this.recommendedBid !== undefined) {
    output.writeFieldBegin('recommendedBid', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.recommendedBid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvAdGroupBasic = module.exports.AdvAdGroupBasic = function(args) {
  this.name = null;
  this.objective = null;
  this.richmediaEnabled = null;
  this.clickToAction = null;
  this.ctaProposition = null;
  this.appId = null;
  this.appMarketPlaceId = null;
  this.startDate = null;
  this.endDate = null;
  this.trackingPartnerId = null;
  this.finalLandingURL = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.objective !== undefined) {
      this.objective = args.objective;
    }
    if (args.richmediaEnabled !== undefined) {
      this.richmediaEnabled = args.richmediaEnabled;
    }
    if (args.clickToAction !== undefined) {
      this.clickToAction = args.clickToAction;
    }
    if (args.ctaProposition !== undefined) {
      this.ctaProposition = args.ctaProposition;
    }
    if (args.appId !== undefined) {
      this.appId = args.appId;
    }
    if (args.appMarketPlaceId !== undefined) {
      this.appMarketPlaceId = args.appMarketPlaceId;
    }
    if (args.startDate !== undefined) {
      this.startDate = args.startDate;
    }
    if (args.endDate !== undefined) {
      this.endDate = args.endDate;
    }
    if (args.trackingPartnerId !== undefined) {
      this.trackingPartnerId = args.trackingPartnerId;
    }
    if (args.finalLandingURL !== undefined) {
      this.finalLandingURL = args.finalLandingURL;
    }
  }
};
AdvAdGroupBasic.prototype = {};
AdvAdGroupBasic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.objective = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.richmediaEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.clickToAction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ctaProposition = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.appId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.appMarketPlaceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.trackingPartnerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.finalLandingURL = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvAdGroupBasic.prototype.write = function(output) {
  output.writeStructBegin('AdvAdGroupBasic');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.objective !== null && this.objective !== undefined) {
    output.writeFieldBegin('objective', Thrift.Type.I32, 2);
    output.writeI32(this.objective);
    output.writeFieldEnd();
  }
  if (this.richmediaEnabled !== null && this.richmediaEnabled !== undefined) {
    output.writeFieldBegin('richmediaEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.richmediaEnabled);
    output.writeFieldEnd();
  }
  if (this.clickToAction !== null && this.clickToAction !== undefined) {
    output.writeFieldBegin('clickToAction', Thrift.Type.I32, 4);
    output.writeI32(this.clickToAction);
    output.writeFieldEnd();
  }
  if (this.ctaProposition !== null && this.ctaProposition !== undefined) {
    output.writeFieldBegin('ctaProposition', Thrift.Type.STRING, 5);
    output.writeString(this.ctaProposition);
    output.writeFieldEnd();
  }
  if (this.appId !== null && this.appId !== undefined) {
    output.writeFieldBegin('appId', Thrift.Type.STRING, 6);
    output.writeString(this.appId);
    output.writeFieldEnd();
  }
  if (this.appMarketPlaceId !== null && this.appMarketPlaceId !== undefined) {
    output.writeFieldBegin('appMarketPlaceId', Thrift.Type.I32, 7);
    output.writeI32(this.appMarketPlaceId);
    output.writeFieldEnd();
  }
  if (this.startDate !== null && this.startDate !== undefined) {
    output.writeFieldBegin('startDate', Thrift.Type.I64, 8);
    output.writeI64(this.startDate);
    output.writeFieldEnd();
  }
  if (this.endDate !== null && this.endDate !== undefined) {
    output.writeFieldBegin('endDate', Thrift.Type.I64, 9);
    output.writeI64(this.endDate);
    output.writeFieldEnd();
  }
  if (this.trackingPartnerId !== null && this.trackingPartnerId !== undefined) {
    output.writeFieldBegin('trackingPartnerId', Thrift.Type.I32, 10);
    output.writeI32(this.trackingPartnerId);
    output.writeFieldEnd();
  }
  if (this.finalLandingURL !== null && this.finalLandingURL !== undefined) {
    output.writeFieldBegin('finalLandingURL', Thrift.Type.STRING, 11);
    output.writeString(this.finalLandingURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvPreset = module.exports.AdvPreset = function(args) {
  this.presetId = null;
  this.presetName = null;
  if (args) {
    if (args.presetId !== undefined) {
      this.presetId = args.presetId;
    }
    if (args.presetName !== undefined) {
      this.presetName = args.presetName;
    }
  }
};
AdvPreset.prototype = {};
AdvPreset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.presetId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.presetName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvPreset.prototype.write = function(output) {
  output.writeStructBegin('AdvPreset');
  if (this.presetId !== null && this.presetId !== undefined) {
    output.writeFieldBegin('presetId', Thrift.Type.STRING, 1);
    output.writeString(this.presetId);
    output.writeFieldEnd();
  }
  if (this.presetName !== null && this.presetName !== undefined) {
    output.writeFieldBegin('presetName', Thrift.Type.STRING, 2);
    output.writeString(this.presetName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvTrackingCode = module.exports.AdvTrackingCode = function(args) {
  this.trackingCodeType = null;
  this.trackingCodeValue = null;
  if (args) {
    if (args.trackingCodeType !== undefined) {
      this.trackingCodeType = args.trackingCodeType;
    }
    if (args.trackingCodeValue !== undefined) {
      this.trackingCodeValue = args.trackingCodeValue;
    }
  }
};
AdvTrackingCode.prototype = {};
AdvTrackingCode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.trackingCodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trackingCodeValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvTrackingCode.prototype.write = function(output) {
  output.writeStructBegin('AdvTrackingCode');
  if (this.trackingCodeType !== null && this.trackingCodeType !== undefined) {
    output.writeFieldBegin('trackingCodeType', Thrift.Type.I32, 1);
    output.writeI32(this.trackingCodeType);
    output.writeFieldEnd();
  }
  if (this.trackingCodeValue !== null && this.trackingCodeValue !== undefined) {
    output.writeFieldBegin('trackingCodeValue', Thrift.Type.STRING, 2);
    output.writeString(this.trackingCodeValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvAdBasic = module.exports.AdvAdBasic = function(args) {
  this.adGroupId = null;
  this.name = null;
  this.adFormat = null;
  this.trackingCodes = null;
  this.customHeader = null;
  if (args) {
    if (args.adGroupId !== undefined) {
      this.adGroupId = args.adGroupId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.adFormat !== undefined) {
      this.adFormat = args.adFormat;
    }
    if (args.trackingCodes !== undefined) {
      this.trackingCodes = args.trackingCodes;
    }
    if (args.customHeader !== undefined) {
      this.customHeader = args.customHeader;
    }
  }
};
AdvAdBasic.prototype = {};
AdvAdBasic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.adGroupId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.adFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.trackingCodes = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.AdvTrackingCode();
          elem86.read(input);
          this.trackingCodes.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.customHeader = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvAdBasic.prototype.write = function(output) {
  output.writeStructBegin('AdvAdBasic');
  if (this.adGroupId !== null && this.adGroupId !== undefined) {
    output.writeFieldBegin('adGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.adGroupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.adFormat !== null && this.adFormat !== undefined) {
    output.writeFieldBegin('adFormat', Thrift.Type.I32, 3);
    output.writeI32(this.adFormat);
    output.writeFieldEnd();
  }
  if (this.trackingCodes !== null && this.trackingCodes !== undefined) {
    output.writeFieldBegin('trackingCodes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.trackingCodes.length);
    for (var iter87 in this.trackingCodes)
    {
      if (this.trackingCodes.hasOwnProperty(iter87))
      {
        iter87 = this.trackingCodes[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customHeader !== null && this.customHeader !== undefined) {
    output.writeFieldBegin('customHeader', Thrift.Type.STRING, 5);
    output.writeString(this.customHeader);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvSimpleAd = module.exports.AdvSimpleAd = function(args) {
  this.adBasic = null;
  this.adValue = null;
  if (args) {
    if (args.adBasic !== undefined) {
      this.adBasic = args.adBasic;
    }
    if (args.adValue !== undefined) {
      this.adValue = args.adValue;
    }
  }
};
AdvSimpleAd.prototype = {};
AdvSimpleAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adBasic = new ttypes.AdvAdBasic();
        this.adBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvSimpleAd.prototype.write = function(output) {
  output.writeStructBegin('AdvSimpleAd');
  if (this.adBasic !== null && this.adBasic !== undefined) {
    output.writeFieldBegin('adBasic', Thrift.Type.STRUCT, 1);
    this.adBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.adValue !== null && this.adValue !== undefined) {
    output.writeFieldBegin('adValue', Thrift.Type.STRING, 2);
    output.writeString(this.adValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvBannerAd = module.exports.AdvBannerAd = function(args) {
  this.adBasic = null;
  this.altText = null;
  this.contentId = null;
  this.imageNames = null;
  if (args) {
    if (args.adBasic !== undefined) {
      this.adBasic = args.adBasic;
    }
    if (args.altText !== undefined) {
      this.altText = args.altText;
    }
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    }
    if (args.imageNames !== undefined) {
      this.imageNames = args.imageNames;
    }
  }
};
AdvBannerAd.prototype = {};
AdvBannerAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adBasic = new ttypes.AdvAdBasic();
        this.adBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.altText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.imageNames = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.imageNames.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvBannerAd.prototype.write = function(output) {
  output.writeStructBegin('AdvBannerAd');
  if (this.adBasic !== null && this.adBasic !== undefined) {
    output.writeFieldBegin('adBasic', Thrift.Type.STRUCT, 1);
    this.adBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.altText !== null && this.altText !== undefined) {
    output.writeFieldBegin('altText', Thrift.Type.STRING, 2);
    output.writeString(this.altText);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.STRING, 3);
    output.writeString(this.contentId);
    output.writeFieldEnd();
  }
  if (this.imageNames !== null && this.imageNames !== undefined) {
    output.writeFieldBegin('imageNames', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.imageNames.length);
    for (var iter95 in this.imageNames)
    {
      if (this.imageNames.hasOwnProperty(iter95))
      {
        iter95 = this.imageNames[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvRMContent = module.exports.AdvRMContent = function(args) {
  this.contentProvider = null;
  this.rmValue = null;
  this.contentType = null;
  this.initialSlotId = null;
  this.adFormat = null;
  if (args) {
    if (args.contentProvider !== undefined) {
      this.contentProvider = args.contentProvider;
    }
    if (args.rmValue !== undefined) {
      this.rmValue = args.rmValue;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
    if (args.initialSlotId !== undefined) {
      this.initialSlotId = args.initialSlotId;
    }
    if (args.adFormat !== undefined) {
      this.adFormat = args.adFormat;
    }
  }
};
AdvRMContent.prototype = {};
AdvRMContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.contentProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rmValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.initialSlotId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.adFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvRMContent.prototype.write = function(output) {
  output.writeStructBegin('AdvRMContent');
  if (this.contentProvider !== null && this.contentProvider !== undefined) {
    output.writeFieldBegin('contentProvider', Thrift.Type.I32, 1);
    output.writeI32(this.contentProvider);
    output.writeFieldEnd();
  }
  if (this.rmValue !== null && this.rmValue !== undefined) {
    output.writeFieldBegin('rmValue', Thrift.Type.STRING, 2);
    output.writeString(this.rmValue);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 3);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.initialSlotId !== null && this.initialSlotId !== undefined) {
    output.writeFieldBegin('initialSlotId', Thrift.Type.I32, 4);
    output.writeI32(this.initialSlotId);
    output.writeFieldEnd();
  }
  if (this.adFormat !== null && this.adFormat !== undefined) {
    output.writeFieldBegin('adFormat', Thrift.Type.I32, 5);
    output.writeI32(this.adFormat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvRichMediaAd = module.exports.AdvRichMediaAd = function(args) {
  this.adBasic = null;
  this.altText = null;
  this.contentId = null;
  this.rmContent = null;
  this.sdkCapabilities = null;
  this.adGroupLandingURL = null;
  if (args) {
    if (args.adBasic !== undefined) {
      this.adBasic = args.adBasic;
    }
    if (args.altText !== undefined) {
      this.altText = args.altText;
    }
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    }
    if (args.rmContent !== undefined) {
      this.rmContent = args.rmContent;
    }
    if (args.sdkCapabilities !== undefined) {
      this.sdkCapabilities = args.sdkCapabilities;
    }
    if (args.adGroupLandingURL !== undefined) {
      this.adGroupLandingURL = args.adGroupLandingURL;
    }
  }
};
AdvRichMediaAd.prototype = {};
AdvRichMediaAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.adBasic = new ttypes.AdvAdBasic();
        this.adBasic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.altText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rmContent = new ttypes.AdvRMContent();
        this.rmContent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.sdkCapabilities = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI32();
          this.sdkCapabilities.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.adGroupLandingURL = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvRichMediaAd.prototype.write = function(output) {
  output.writeStructBegin('AdvRichMediaAd');
  if (this.adBasic !== null && this.adBasic !== undefined) {
    output.writeFieldBegin('adBasic', Thrift.Type.STRUCT, 1);
    this.adBasic.write(output);
    output.writeFieldEnd();
  }
  if (this.altText !== null && this.altText !== undefined) {
    output.writeFieldBegin('altText', Thrift.Type.STRING, 2);
    output.writeString(this.altText);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.STRING, 3);
    output.writeString(this.contentId);
    output.writeFieldEnd();
  }
  if (this.rmContent !== null && this.rmContent !== undefined) {
    output.writeFieldBegin('rmContent', Thrift.Type.STRUCT, 4);
    this.rmContent.write(output);
    output.writeFieldEnd();
  }
  if (this.sdkCapabilities !== null && this.sdkCapabilities !== undefined) {
    output.writeFieldBegin('sdkCapabilities', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.sdkCapabilities.length);
    for (var iter103 in this.sdkCapabilities)
    {
      if (this.sdkCapabilities.hasOwnProperty(iter103))
      {
        iter103 = this.sdkCapabilities[iter103];
        output.writeI32(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.adGroupLandingURL !== null && this.adGroupLandingURL !== undefined) {
    output.writeFieldBegin('adGroupLandingURL', Thrift.Type.STRING, 6);
    output.writeString(this.adGroupLandingURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvImageDetail = module.exports.AdvImageDetail = function(args) {
  this.filename = null;
  this.imageContent = null;
  if (args) {
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
    if (args.imageContent !== undefined) {
      this.imageContent = args.imageContent;
    }
  }
};
AdvImageDetail.prototype = {};
AdvImageDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imageContent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvImageDetail.prototype.write = function(output) {
  output.writeStructBegin('AdvImageDetail');
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 1);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.imageContent !== null && this.imageContent !== undefined) {
    output.writeFieldBegin('imageContent', Thrift.Type.STRING, 2);
    output.writeString(this.imageContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdvBannerContent = module.exports.AdvBannerContent = function(args) {
  this.altText = null;
  this.images = null;
  if (args) {
    if (args.altText !== undefined) {
      this.altText = args.altText;
    }
    if (args.images !== undefined) {
      this.images = args.images;
    }
  }
};
AdvBannerContent.prototype = {};
AdvBannerContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.altText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.images = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.AdvImageDetail();
          elem110.read(input);
          this.images.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdvBannerContent.prototype.write = function(output) {
  output.writeStructBegin('AdvBannerContent');
  if (this.altText !== null && this.altText !== undefined) {
    output.writeFieldBegin('altText', Thrift.Type.STRING, 1);
    output.writeString(this.altText);
    output.writeFieldEnd();
  }
  if (this.images !== null && this.images !== undefined) {
    output.writeFieldBegin('images', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.images.length);
    for (var iter111 in this.images)
    {
      if (this.images.hasOwnProperty(iter111))
      {
        iter111 = this.images[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

